# -*- mode: ruby -*-
# vi: set ft=ruby :
# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!


# The VM Setup for the attack looks like this. 

# OPEN5GS [.100 & .101] <---> AMF-Only [.102] <---> GNB-Only [gNodeBs at .120 & .121] <---> UE [at .130]
#                                                      |----------------------------------> UE [at .131]

# Variables
OPEN5GS_IPv4_ADDR = "192.168.56.100"
UPF_OPEN5GS_IPv4_ADDR = "192.168.56.101"
AMF_OPEN5GS_IPv4_ADDR = "192.168.56.102"
RAN1_IPv4_ADDR = "192.168.56.120"
RAN2_IPv4_ADDR = "192.168.56.121"
UE1_IPv4_ADDR = "192.168.56.130"
UE2_IPv4_ADDR = "192.168.56.131"

Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-20.04-arm64"
  config.vm.box_version = "202112.19.0" # The version 20 leads to IP address collision between the VMs
  def_provider = "parallels"


  # The following folders shall be synced and loaded in all VMs 
  config.vm.synced_folder "load-node", "/load-node"
  config.vm.synced_folder "configs", "/configs"
  config.vm.synced_folder "scripts", "/scripts"


  # VM #1: OPEN5GS 5G core network (All-in-one - but AMF)
  config.vm.define "open5gs" do |open5gs|
    open5gs.vm.network "private_network", ip: OPEN5GS_IPv4_ADDR
    open5gs.vm.network "private_network", ip: UPF_OPEN5GS_IPv4_ADDR
    open5gs.vm.synced_folder "../open5gs", "/LoadOpen5gs"

    open5gs.vm.provider def_provider do |vb|
     # Customize the amount of cpu & memory on the VM:
     vb.name = "open5gs"
     vb.memory = "1024"
     vb.cpus = "1"
    end

    open5gs.vm.provision "shell", :privileged => true, inline: <<-SHELL
      echo "---------Updating packages--------"
      sudo apt-get update -y 
      
      echo "---------Installing Open5GS--------"
      sudo apt-get install -y wget screen net-tools gnupg sysstat cmake python3-pip python3-setuptools python3-wheel ninja-build build-essential flex bison git libsctp-dev libgnutls28-dev libgcrypt-dev libssl-dev libidn11-dev libmongoc-dev libbson-dev libyaml-dev libnghttp2-dev libmicrohttpd-dev libcurl4-gnutls-dev libnghttp2-dev libtins-dev libtalloc-dev meson screen 
      curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
      echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
      sudo apt-get update -y  
      sudo apt-get install -y mongodb-org 
      sudo systemctl enable mongod 
      sudo systemctl start mongod 
      
      sudo cp -r /LoadOpen5gs/ /home/vagrant/open5gs/
      sudo sh /home/vagrant/open5gs/misc/netconf.sh 
      cd /home/vagrant/open5gs
      meson build --prefix=`pwd`/install 
      ninja -C build 
      cd build
      ninja install 
      cd /home/vagrant/
      
      echo "---------Copying to root folders--------"
      sudo cp /home/vagrant/open5gs/install/bin/open* /bin/ 
      sudo cp /home/vagrant/open5gs/misc/db/open5gs-* /bin/
      sudo cp -r /home/vagrant/open5gs/install/var/* /var/ 
      sudo cp -r /home/vagrant/open5gs/install/etc/* /etc/ 
      sudo cp -r /home/vagrant/open5gs/install/lib/* /lib/ 
      echo "---------Finished installing Open5GS ------"
      
      echo "---------Installing Node and and building WebUI------"
      sudo -E bash /load-node/install_node  
      sudo apt-get install -y nodejs yarn  
      
      cd /home/vagrant/open5gs/webui/
      sudo npm ci 
      sudo npm run build  
      
      echo "--------Loading the test configs -------------"
      sudo cp -r /configs/open5gs-config/* /home/vagrant/open5gs/install/etc/
      
      echo "---------Copying all Open5GS services ------"
      sudo cp /configs/open5gs-services/* /usr/lib/systemd/system/

      echo "------- Add a test user in the UDM/UDR database ------"

      python3 /scripts/add_user.py 300
      cp /scripts/start_all_open5gs.sh /home/vagrant/
      cp /scripts/stop_all_open5gs.sh /home/vagrant/

      chmod +x /home/vagrant/start_all_open5gs.sh
      chmod +x /home/vagrant/stop_all_open5gs.sh

      echo "---------Finished installing Open5GS ------"
    SHELL
    
    # Setting up NAT for the VM
    open5gs.trigger.after :up do |trigger|
      trigger.name = "Finished Message"
      trigger.info = "Machine is up!"
      open5gs.vm.provision :shell, :run => 'always', :privileged => true, inline: <<-SHELL
        # This script will run everytime that the system bootsup 
        echo "--- Adding a route for the UE to have WAN connectivity over SGi/N6 -------"
        sudo sh /home/vagrant/open5gs/misc/netconf.sh
        ### Enable IPv4/IPv6 Forwarding
        sudo sysctl -w net.ipv4.ip_forward=1
        sudo sysctl -w net.ipv6.conf.all.forwarding=1
        ### Add NAT Rule
        sudo iptables -t nat -A POSTROUTING -s 10.45.0.0/16 ! -o ogstun -j MASQUERADE
        sudo ip6tables -t nat -A POSTROUTING -s 2001:db8:cafe::/48 ! -o ogstun -j MASQUERADE

      SHELL
    end
  end

  # VM #2 : OPEN5GS 5G core network (AMF Only)
  config.vm.define "amf-only" do |amf|
    amf.vm.network "private_network", ip: AMF_OPEN5GS_IPv4_ADDR
    amf.vm.synced_folder "../open5gs", "/LoadOpen5gs"
    
    amf.vm.provider def_provider do |vb|
     # Customize the amount of cpu & memory on the VM:
     vb.name = "amf-only"
     vb.memory = "512"
     vb.cpus = "1"
    end

    amf.vm.provision "shell", :privileged => true, inline: <<-SHELL
      echo "---------Updating packages--------"
      sudo apt-get update -y 
      
      echo "---------Installing Open5GS--------"
      sudo apt-get install -y wget screen net-tools gnupg cmake sysstat python3-pip python3-setuptools python3-wheel ninja-build build-essential flex bison git libsctp-dev libgnutls28-dev libgcrypt-dev libssl-dev libidn11-dev libmongoc-dev libbson-dev libyaml-dev libnghttp2-dev libmicrohttpd-dev libcurl4-gnutls-dev libnghttp2-dev libtins-dev libtalloc-dev meson screen
      curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
      echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
      sudo apt-get update -y  
      sudo apt-get install -y mongodb-org 
      sudo systemctl enable mongod 
      sudo systemctl start mongod 
      
      sudo cp -r /LoadOpen5gs/ /home/vagrant/open5gs/
      sudo sh /home/vagrant/open5gs/misc/netconf.sh 
      cd /home/vagrant/open5gs
      meson build --prefix=`pwd`/install 
      ninja -C build 
      cd build
      ninja install 
      cd /home/vagrant/
      
      echo "---------Copying to root folders--------"
      sudo cp /home/vagrant/open5gs/install/bin/open* /bin/ 
      sudo cp /home/vagrant/open5gs/misc/db/open5gs-* /bin/
      sudo cp -r /home/vagrant/open5gs/install/var/* /var/ 
      sudo cp -r /home/vagrant/open5gs/install/etc/* /etc/ 
      sudo cp -r /home/vagrant/open5gs/install/lib/* /lib/ 
      echo "---------Finished installing Open5GS ------"
      
      echo "---------Installing Node and and building WebUI------"
      sudo -E bash /load-node/install_node  
      sudo apt-get install -y nodejs yarn  
      
      cd /home/vagrant/open5gs/webui/
      sudo npm ci 
      sudo npm run build  
      
      echo "--------Loading the test configs -------------"
      sudo cp /vagrant/configs/open5gs-config/open5gs/amf.yaml /home/vagrant/open5gs/install/etc/open5gs/
      
      echo "---------Copying all Open5GS services ------"
      sudo cp /configs/open5gs-services/* /usr/lib/systemd/system/
      sudo cp /scripts/process_mon.sh /home/vagrant/
      sudo chmod +x /home/vagrant/process_mon.sh
       
      echo "---------Finished installing Open5GS ------"
    SHELL
    
  end

  # VM #3 : UERANSIM as RAN (gNB) Simulator
  config.vm.define "gnb-only" do |ueransim|
    ueransim.vm.network "private_network", ip: RAN1_IPv4_ADDR
    ueransim.vm.network "private_network", ip: RAN2_IPv4_ADDR
    ueransim.vm.synced_folder "../UERANSIM", "/LoadUeransim"

    ueransim.vm.provider def_provider do |vb|
    # Customize the amount of cpu & memory on the VM:
    vb.name = "gnb-only"
     vb.memory = "1024"
     vb.cpus = "1"
    end

    # #Enable provisioning with a shell script.
    ueransim.vm.provision "shell", inline:<<-SHELL 
      echo "---------Updating packages --------"
      sudo apt-get update -y 

      echo "---------Installing Dependencies--------"
      sudo apt-get install make g++ sysstat libsctp-dev lksctp-tools iproute2 net-tools screen -y #
      sudo snap install cmake --classic 

      echo "---------Compiling UERANSIM--------"
      cp -r /LoadUeransim/ /home/vagrant/UERANSIM/
      cd /home/vagrant/UERANSIM
      make 
      cd /home/vagrant/
      sudo cp UERANSIM/build/nr-* /usr/bin/
      echo "---------UERANSIM Compiled--------"

      echo "------- Modify the gNB & UE configuration files  -------"
      sudo cp /configs/ueransim-config/open5gs-gnb* /home/vagrant/UERANSIM/config/
      SHELL
  end
  
  # VM #4 : UERANSIM as benign (UE) Simulator
  config.vm.define "benign-ue-only" do |ueransim|
    ueransim.vm.network "private_network", ip: UE1_IPv4_ADDR
    ueransim.vm.synced_folder "../UERANSIM", "/LoadUeransim"

    ueransim.vm.provider def_provider do |vb|
    # Customize the amount of cpu & memory on the VM:
    vb.name = "benign-ue-only"
     vb.memory = "512"
     vb.cpus = "1"
    end

    # #Enable provisioning with a shell script.
    ueransim.vm.provision "shell", inline:<<-SHELL 
      echo "---------Updating packages --------"
      sudo apt-get update -y 

      echo "---------Installing Dependencies--------"
      sudo apt-get install make g++ sysstat libsctp-dev lksctp-tools iproute2 net-tools screen -y #
      sudo snap install cmake --classic 

      echo "---------Compiling UERANSIM--------"
      cp -r /LoadUeransim/ /home/vagrant/UERANSIM/
      cd /home/vagrant/UERANSIM
      make 
      cd /home/vagrant/
      sudo cp UERANSIM/build/nr-* /usr/bin/

      echo "---------UERANSIM Compiled--------"
      sudo cp /scripts/cycle_through_ben_ue.py /home/vagrant/
      sudo cp /home/vagrant/UERANSIM/build/nr* /usr/bin/
      echo "------- Modify the gNB & UE configuration files  -------"
      sudo cp /configs/ueransim-config/open5gs-ue.yaml /home/vagrant/UERANSIM/config/
      SHELL
  end

  # VM #5 : UERANSIM as malicious (UE) Simulator
  config.vm.define "mal-ue-only" do |ueransim|
    ueransim.vm.network "private_network", ip: UE2_IPv4_ADDR
    ueransim.vm.synced_folder "../UERANSIM", "/LoadUeransim"

    ueransim.vm.provider def_provider do |vb|
    # Customize the amount of cpu & memory on the VM:
      vb.name = "mal-ue-only"
      vb.memory = "8192"
      vb.cpus = "4"
    end

    # #Enable provisioning with a shell script.
    ueransim.vm.provision "shell", inline:<<-SHELL 
      echo "---------Updating packages --------"
      sudo apt-get update -y 

      echo "---------Installing Dependencies--------"
      sudo apt-get install make g++ sysstat libsctp-dev lksctp-tools iproute2 net-tools screen -y 
      sudo snap install cmake --classic 

      echo "---------Compiling UERANSIM--------"
      cp -r /LoadUeransim/ /home/vagrant/UERANSIM/
      cd /home/vagrant/UERANSIM
      make 
      echo "---------UERANSIM Compiled--------"

      echo "------- Modify the gNB & UE configuration files  -------"
      sudo cp /configs/ueransim-config/open5gs-ue.yaml /home/vagrant/UERANSIM/config/
      sudo cp /scripts/launch.py /home/vagrant/
      sudo cp /home/vagrant/UERANSIM/build/nr* /usr/bin/
      cd /home/vagrant/
      mkdir .logs
      sudo cp UERANSIM/build/nr-* /usr/bin/
      SHELL
  end
  

end


# echo 9999999 > /proc/sys/vm/max_map_count
# # If you want to persist across reboots
# echo "vm.max_map_count=9999999" | sudo tee -a /etc/sysctl.conf